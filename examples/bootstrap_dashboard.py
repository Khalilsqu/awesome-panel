"""The purpose of this app is to test that a **multi-page Dashboard Layout** similar to the
[bootstrap dashboard template](https://getbootstrap.com/docs/4.3/examples/dashboard/)
from [getboostrap.com](https://getbootstrap.com/) can be implemented in
[Panel](https://panel.pyviz.org/).
"""
import hvplot.pandas  # pylint: disable=unused-import
import pandas as pd
import panel as pn

from awesome_panel import config
from awesome_panel.assets.csv import (
    BOOTSTRAP_DASHBOARD_CHART_PATH,
    BOOTSTRAP_DASHBOARD_TABLE_PATH,
)

COLOR = config.ACCENT

if not "bootstrap_dashboard" in pn.state.cache:
    pn.state.cache["bootstrap_dashboard"] = {
        "chart_data": pd.read_csv(BOOTSTRAP_DASHBOARD_CHART_PATH),
        "table_data": pd.read_csv(BOOTSTRAP_DASHBOARD_TABLE_PATH).set_index("Header0"),
    }


def _holoviews_chart():
    """## Dashboard Orders Chart generated by HoloViews"""
    data = _get_chart_data()
    line_plot = data.hvplot.line(
        x="Day",
        y="Orders",
        height=500,
        line_color=COLOR,
        line_width=6,
    )
    scatter_plot = data.hvplot.scatter(x="Day", y="Orders", height=300,).opts(
        marker="o",
        size=10,
        color=COLOR,
    )
    fig = line_plot * scatter_plot
    gridstyle = {
        "grid_line_color": "black",
        "grid_line_width": 0.1,
    }
    fig = fig.opts(
        responsive=True,
        toolbar=None,
        yticks=list(
            range(
                12000,
                26000,
                2000,
            )
        ),
        ylim=(
            12000,
            26000,
        ),
        gridstyle=gridstyle,
        show_grid=True,
    )
    return fig


def _get_chart_data() -> pd.DataFrame:
    """## Chart Data

    Returns:
        pd.DataFrame -- A DataFrame with dummy data and columns=["Day", "Orders"]
    """
    return pn.state.cache["bootstrap_dashboard"]["chart_data"]


def _get_table_data() -> pd.DataFrame:
    """## Table Data

    Returns:
        pd.DataFrame -- A DataFrame with dummy data and columns=
        ["Header0", "Header1", "Header2", "Header3", "Header4"]
    """
    return pn.state.cache["bootstrap_dashboard"]["table_data"]


app = config.extension(url="bootstrap_dashboard", main_max_width="1200px")

pn.Column(pn.pane.Markdown("## Dashboard"), _holoviews_chart()).servable()
pn.Column(pn.pane.Markdown("## Section Title"), _get_table_data()).servable()
